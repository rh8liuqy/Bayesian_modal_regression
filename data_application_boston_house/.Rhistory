par.est <- stan_fit$summary(c("alpha",paste0("beta[",1:P,"]")))
print(par.est)
if (option == "normal" | option == "ALD") {
df_post <- stan_fit$draws(variables = c("alpha",
paste0("beta[",1:P,"]"),
"sigma"),
format = "df")
} else {
df_post <- stan_fit$draws(variables = c("alpha",
paste0("beta[",1:P,"]"),
"w",
"sigma",
"delta"),
format = "df")
}
plot(mcmc_trace(df_post))
## LaTeX table in supplementary materials
library(kableExtra)
posterior_inference <- stan_fit$summary()
print(posterior_inference %>%
filter(! variable %in% c("lp__",
paste0("ystar[",1:N,"]"),
paste0("log_lik[",1:N,"]"))) %>%
kbl(format = "latex", booktabs = TRUE, digits = 2) %>%
kable_styling())
## prediction interval
stan_pred <- stan_fit$draws(paste0("ystar[",1:N,"]"),
format = "df")
point_pred <- apply(stan_pred, 2, median)[1:length(y)]
hdi_df <- hdi(stan_pred,credMass = 0.9)[,1:length(y)]
df_pred <- data.frame(pred = point_pred,
lower = hdi_df[1,],
upper = hdi_df[2,])
## model selection
model_selection <- stan_fit$loo()
elpd_loo <- model_selection$estimates[1,1]
return(list(par.est = par.est,
elpd_loo = elpd_loo))
}
# Data analysis with DC ---------------------------------------------------
pdf("traceplot_normal_DC_included.pdf",height = 4,width = 8)
out1 <- data_application_crime("normal",remove_DC = FALSE)
dev.off()
pdf("traceplot_ALD_DC_included.pdf",height = 4,width = 8)
out2 <- data_application_crime("ALD",remove_DC = FALSE)
dev.off()
pdf("traceplot_TPSC_DC_included.pdf",height = 4,width = 8)
out3 <- data_application_crime("TPSC",remove_DC = FALSE)
dev.off()
out1
out2
out3
df_est1 <- bind_rows(out1$par.est[c("variable","mean","q5","q95")],
out2$par.est[c("variable","mean","q5","q95")],
out3$par.est[c("variable","mean","q5","q95")])
df_est1["Likelihood"] <- rep(c("normal","ALD","TPSC"),
each = 4)
df_est1["elpd_loo"] <- rep(c(out1$elpd_loo,
out2$elpd_loo,
out3$elpd_loo),
each = 4)
df_est1 <- df_est1[,c(5,6,1,2,3,4)]
# Data analysis without DC ------------------------------------------------
pdf("traceplot_normal_DC_excluded.pdf",height = 4,width = 8)
out4 <- data_application_crime("normal",remove_DC = TRUE)
dev.off()
pdf("traceplot_ALD_DC_excluded.pdf",height = 4,width = 8)
out5 <- data_application_crime("ALD",remove_DC = TRUE)
dev.off()
pdf("traceplot_TPSC_DC_excluded.pdf",height = 4,width = 8)
out6 <- data_application_crime("TPSC",remove_DC = TRUE)
dev.off()
out4
out5
out6
df_est2 <- bind_rows(out4$par.est[c("variable","mean","q5","q95")],
out5$par.est[c("variable","mean","q5","q95")],
out6$par.est[c("variable","mean","q5","q95")])
df_est2["Likelihood"] <- rep(c("normal","ALD","TPSC"),
each = 4)
df_est2["elpd_loo"] <- rep(c(out4$elpd_loo,
out5$elpd_loo,
out6$elpd_loo),
each = 4)
df_est2 <- df_est2[,c(5,6,1,2,3,4)]
df_est <- rbind(df_est1,df_est2)
df_est$DC <- rep(c("Include D.C.",
"Exclude D.C."),
each = 12)
df_est <- df_est[,c(7,1:6)]
kbl(df_est,
digits = 4,
format = "latex",
booktabs = TRUE,
caption = "this is caption",
label = "this is label") %>%
collapse_rows(columns = 1:3, valign = "middle")
kbl(df_est,
digits = 4,
booktabs = TRUE,
caption = "this is caption",
label = "this is label") %>%
collapse_rows(columns = 1:3, valign = "middle") %>%
kable_styling()
output <- readRDS("~/Library/CloudStorage/OneDrive-UniversityofSouthCarolina/Research/postdoc_project01/skewT_GP_seed_100.RDS")
View(output)
df_beta <- as.data.frame(output$beta_output[4501:5500,])
beta_mcmc <- as_draws(df_beta)
mcmc_trace(beta_mcmc)
df_beta <- as.data.frame(output$beta_output[2501:5500,])
beta_mcmc <- as_draws(df_beta)
mcmc_trace(beta_mcmc)
df_beta <- as.data.frame(output$beta_output[5001:5500,])
beta_mcmc <- as_draws(df_beta)
mcmc_trace(beta_mcmc)
summary(beta_mcmc)
print(summary(beta_mcmc), n = 100)
setwd("~/Library/CloudStorage/OneDrive-UniversityofSouthCarolina/Research/GUD_revision/codes/data_application_boston_house")
rm(list = ls())
library(cmdstanr)
library(posterior)
library(bayesplot)
library(MASS)
library(tidyverse)
library(HDInterval)
library(kableExtra)
set.seed(100)
data_application <- function(option) {
df1 <- MASS::Boston
## data list for stan
N <- nrow(df1)
y <- df1$medv
X <- df1 %>%
dplyr::select(-medv)
X <- as.matrix(X)
P <- ncol(X)
dat <- list(N = N,
X = X,
y = y,
P = P)
if (option == "normal") {
## compile stan program for normal
stan_file <- "../normal_MLR.stan"
title.txt <- "Likelihood: Normal (mean regression model)"
}
else if(option == "ALD") {
stan_file <- "../quantile_MLR.stan"
title.txt <- "Likelihood: ALD (median regression model)"
}
else if(option == "TPSC") {
stan_file <- "../TPSC_t_MLR.stan"
title.txt <- "Likelihood: TPSC-Student-t (modal regression model)"
}
else if(option == "FG") {
stan_file <- "../FG_MLR.stan"
title.txt <- "Likelihood: FG (modal regression model)"
}
else if(option == "SN") {
stan_file <- "../SN_MLR.stan"
title.txt <- "Likelihood: SN_CP (mean regression model)"
}
stan_mod <- cmdstan_model(stan_file)
## load initial value
df_initial <- read.csv("./initial_value.csv")
list_initial <- vector(mode = "list", length = 2)
names(list_initial) <- c("alpha","beta")
list_initial[[1]] <- df_initial$median[1]
list_initial[[2]] <- df_initial$median[2:nrow(df_initial)]
if (option == "SN") {
list_initial[[3]] <- 1.0
list_initial[[4]] <- 0.0
names(list_initial)[3:4] <- c("sigma","gamma1")
}
## MCMC
stan_fit <- stan_mod$sample(
data = dat,
seed = 100,
chains = 4,
parallel_chains = 4,
refresh = 0,
iter_warmup = 5000,
save_warmup = FALSE,
iter_sampling = 10000,
show_exceptions = FALSE,
init = function() {return(list_initial)}
)
## parameter estimation
par.est <- stan_fit$summary(c("alpha",paste0("beta[",1:P,"]")))
write.csv(x = par.est,
file = paste0(option,"_inference.csv"),
row.names = FALSE)
if (option == "normal" | option == "ALD") {
df_post <- stan_fit$draws(variables = c("alpha",
paste0("beta[",1:P,"]"),
"sigma"),
format = "df")
posterior_inference <- stan_fit$summary(c("alpha",
paste0("beta[",1:P,"]"),
"sigma"))
} else if (option == "SNCP"){
df_post <- stan_fit$draws(variables = c("alpha",
paste0("beta[",1:P,"]"),
"sigma",
"gamma1"),
format = "df")
posterior_inference <- stan_fit$summary(c("alpha",
paste0("beta[",1:P,"]"),
"sigma",
"gamma1"))
} else if (option == "TPSC"){
df_post <- stan_fit$draws(variables = c("alpha",
paste0("beta[",1:P,"]"),
"w",
"sigma",
"delta"),
format = "df")
posterior_inference <- stan_fit$summary(c("alpha",
paste0("beta[",1:P,"]"),
"w",
"sigma",
"delta"))
}
## print MCMC trace
plot(mcmc_trace(df_post, facet_args = list(ncol = 2)))
## print summary statistics
print(posterior_inference %>%
kbl(format = "latex", booktabs = TRUE, digits = 2) %>%
kable_styling())
## prediction interval
stan_pred <- stan_fit$draws(paste0("ystar[",1:N,"]"),
format = "df")
point_pred <- apply(stan_pred, 2, median)[1:length(y)]
hdi_df <- hdi(stan_pred,credMass = 0.9)[,1:length(y)]
df_pred <- data.frame(pred = point_pred,
lower = hdi_df[1,],
upper = hdi_df[2,])
## model selection
model_selection <- stan_fit$loo()
elpd_loo <- model_selection$estimates[1,1]
## print likelihood type
print(title.txt)
output <- list(coverage = round(mean((y < df_pred$upper) & (y > df_pred$lower)), 4),
width = round(mean(df_pred$upper - df_pred$lower),2),
ELPD = round(elpd_loo,2))
## Coverage Rate
print(paste0("Coverage Rate: ", output$coverage))
## Width
print(paste0("Width: ", output$width))
## ELPD
print(paste0("ELPD: ", output$ELPD))
return(output)
}
pdf("traceplot_normal.pdf",height = 11,width = 8.5)
output_normal <- data_application("normal")
dev.off()
pdf("traceplot_SN.pdf",height = 11,width = 8.5)
output_SN <- data_application("SN")
dev.off()
pdf("traceplot_SN.pdf",height = 11,width = 8.5)
output_SN <- data_application("SN")
df1 <- MASS::Boston
## data list for stan
N <- nrow(df1)
y <- df1$medv
X <- df1 %>%
dplyr::select(-medv)
X <- as.matrix(X)
P <- ncol(X)
dat <- list(N = N,
X = X,
y = y,
P = P)
stan_file <- "../SN_MLR.stan"
title.txt <- "Likelihood: SN_CP (mean regression model)"
stan_mod <- cmdstan_model(stan_file)
## load initial value
df_initial <- read.csv("./initial_value.csv")
list_initial <- vector(mode = "list", length = 2)
names(list_initial) <- c("alpha","beta")
list_initial[[1]] <- df_initial$median[1]
list_initial[[2]] <- df_initial$median[2:nrow(df_initial)]
if (option == "SN") {
list_initial[[3]] <- 1.0
list_initial[[4]] <- 0.0
names(list_initial)[3:4] <- c("sigma","gamma1")
}
option <- "SN"
if (option == "SN") {
list_initial[[3]] <- 1.0
list_initial[[4]] <- 0.0
names(list_initial)[3:4] <- c("sigma","gamma1")
}
## MCMC
stan_fit <- stan_mod$sample(
data = dat,
seed = 100,
chains = 4,
parallel_chains = 4,
refresh = 0,
iter_warmup = 5000,
save_warmup = FALSE,
iter_sampling = 10000,
show_exceptions = FALSE,
init = function() {return(list_initial)}
)
## parameter estimation
par.est <- stan_fit$summary(c("alpha",paste0("beta[",1:P,"]")))
write.csv(x = par.est,
file = paste0(option,"_inference.csv"),
row.names = FALSE)
if (option == "normal" | option == "ALD") {
df_post <- stan_fit$draws(variables = c("alpha",
paste0("beta[",1:P,"]"),
"sigma"),
format = "df")
posterior_inference <- stan_fit$summary(c("alpha",
paste0("beta[",1:P,"]"),
"sigma"))
} else if (option == "SN"){
df_post <- stan_fit$draws(variables = c("alpha",
paste0("beta[",1:P,"]"),
"sigma",
"gamma1"),
format = "df")
posterior_inference <- stan_fit$summary(c("alpha",
paste0("beta[",1:P,"]"),
"sigma",
"gamma1"))
} else if (option == "TPSC"){
df_post <- stan_fit$draws(variables = c("alpha",
paste0("beta[",1:P,"]"),
"w",
"sigma",
"delta"),
format = "df")
posterior_inference <- stan_fit$summary(c("alpha",
paste0("beta[",1:P,"]"),
"w",
"sigma",
"delta"))
}
## print MCMC trace
plot(mcmc_trace(df_post, facet_args = list(ncol = 2)))
## print summary statistics
print(posterior_inference %>%
kbl(format = "latex", booktabs = TRUE, digits = 2) %>%
kable_styling())
## prediction interval
stan_pred <- stan_fit$draws(paste0("ystar[",1:N,"]"),
format = "df")
rm(list = ls())
library(cmdstanr)
library(posterior)
library(bayesplot)
library(MASS)
library(tidyverse)
library(HDInterval)
library(kableExtra)
set.seed(100)
data_application <- function(option) {
df1 <- MASS::Boston
## data list for stan
N <- nrow(df1)
y <- df1$medv
X <- df1 %>%
dplyr::select(-medv)
X <- as.matrix(X)
P <- ncol(X)
dat <- list(N = N,
X = X,
y = y,
P = P)
if (option == "normal") {
## compile stan program for normal
stan_file <- "../normal_MLR.stan"
title.txt <- "Likelihood: Normal (mean regression model)"
}
else if(option == "ALD") {
stan_file <- "../quantile_MLR.stan"
title.txt <- "Likelihood: ALD (median regression model)"
}
else if(option == "TPSC") {
stan_file <- "../TPSC_t_MLR.stan"
title.txt <- "Likelihood: TPSC-Student-t (modal regression model)"
}
else if(option == "FG") {
stan_file <- "../FG_MLR.stan"
title.txt <- "Likelihood: FG (modal regression model)"
}
else if(option == "SN") {
stan_file <- "../SN_MLR.stan"
title.txt <- "Likelihood: SN_CP (mean regression model)"
}
stan_mod <- cmdstan_model(stan_file)
## load initial value
df_initial <- read.csv("./initial_value.csv")
list_initial <- vector(mode = "list", length = 2)
names(list_initial) <- c("alpha","beta")
list_initial[[1]] <- df_initial$median[1]
list_initial[[2]] <- df_initial$median[2:nrow(df_initial)]
if (option == "SN") {
list_initial[[3]] <- 1.0
list_initial[[4]] <- 0.0
names(list_initial)[3:4] <- c("sigma","gamma1")
}
## MCMC
stan_fit <- stan_mod$sample(
data = dat,
seed = 100,
chains = 4,
parallel_chains = 4,
refresh = 0,
iter_warmup = 5000,
save_warmup = FALSE,
iter_sampling = 10000,
show_exceptions = FALSE,
init = function() {return(list_initial)}
)
## parameter estimation
par.est <- stan_fit$summary(c("alpha",paste0("beta[",1:P,"]")))
write.csv(x = par.est,
file = paste0(option,"_inference.csv"),
row.names = FALSE)
if (option == "normal" | option == "ALD") {
df_post <- stan_fit$draws(variables = c("alpha",
paste0("beta[",1:P,"]"),
"sigma"),
format = "df")
posterior_inference <- stan_fit$summary(c("alpha",
paste0("beta[",1:P,"]"),
"sigma"))
} else if (option == "SN"){
df_post <- stan_fit$draws(variables = c("alpha",
paste0("beta[",1:P,"]"),
"sigma",
"gamma1"),
format = "df")
posterior_inference <- stan_fit$summary(c("alpha",
paste0("beta[",1:P,"]"),
"sigma",
"gamma1"))
} else if (option == "TPSC"){
df_post <- stan_fit$draws(variables = c("alpha",
paste0("beta[",1:P,"]"),
"w",
"sigma",
"delta"),
format = "df")
posterior_inference <- stan_fit$summary(c("alpha",
paste0("beta[",1:P,"]"),
"w",
"sigma",
"delta"))
}
## print MCMC trace
plot(mcmc_trace(df_post, facet_args = list(ncol = 2)))
## print summary statistics
print(posterior_inference %>%
kbl(format = "latex", booktabs = TRUE, digits = 2) %>%
kable_styling())
## prediction interval
stan_pred <- stan_fit$draws(paste0("ystar[",1:N,"]"),
format = "df")
point_pred <- apply(stan_pred, 2, median)[1:length(y)]
hdi_df <- hdi(stan_pred,credMass = 0.9)[,1:length(y)]
df_pred <- data.frame(pred = point_pred,
lower = hdi_df[1,],
upper = hdi_df[2,])
## model selection
model_selection <- stan_fit$loo()
elpd_loo <- model_selection$estimates[1,1]
## print likelihood type
print(title.txt)
output <- list(coverage = round(mean((y < df_pred$upper) & (y > df_pred$lower)), 4),
width = round(mean(df_pred$upper - df_pred$lower),2),
ELPD = round(elpd_loo,2))
## Coverage Rate
print(paste0("Coverage Rate: ", output$coverage))
## Width
print(paste0("Width: ", output$width))
## ELPD
print(paste0("ELPD: ", output$ELPD))
return(output)
}
pdf("traceplot_normal.pdf",height = 11,width = 8.5)
output_normal <- data_application("normal")
dev.off()
pdf("traceplot_SN.pdf",height = 11,width = 8.5)
output_SN <- data_application("SN")
dev.off()
pdf("traceplot_ALD.pdf",height = 11,width = 8.5)
pdf("traceplot_ALD.pdf",height = 11,width = 8.5)
output_ALD <- data_application("ALD")
dev.off()
pdf("traceplot_TPSC.pdf",height = 11,width = 8.5)
output_TPSC <- data_application("TPSC")
dev.off()
output <- readRDS("~/Library/CloudStorage/OneDrive-UniversityofSouthCarolina/Research/postdoc_project01/skewT_GP_seed_100.RDS")
View(output)
df_beta <- as.data.frame(output$beta_output[5001:7500,])
beta_mcmc <- as_draws(df_beta)
print(summary(beta_mcmc))
print(summary(beta_mcmc), n = 100)
mcmc_trace(beta_mcmc)
df_beta <- as.data.frame(output$beta_output[6501:7500,])
beta_mcmc <- as_draws(df_beta)
print(summary(beta_mcmc), n = 100)
mcmc_trace(beta_mcmc)
df_beta <- as.data.frame(output$beta_output[4501:7500,])
beta_mcmc <- as_draws(df_beta)
print(summary(beta_mcmc), n = 100)
mcmc_trace(beta_mcmc)
